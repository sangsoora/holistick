<div class="container practitioner-my-services">
  <div class="my-services-header">
    <ul class="list-inline tabs-underlined mb-0">
      <li>
        <p class="tab-underlined active-tab">Active <% if @active_serivces.count > 0 %> (<%= @active_serivces.count %>) <% end %></p>
      </li>
      <li>
        <p class="tab-underlined">Deactivated <% if @deactivated_serivces.count > 0 %> (<%= @deactivated_serivces.count%>) <% end %> </p>
      </li>
    </ul>
    <% if current_user.practitioner.minimum_profile? %>
      <%= link_to 'Add New Service', '', data: { toggle: "modal", target: "#newServiceModal" }, class: 'btn btn-flat' %>
    <% end %>
  </div>
  <div class="lists">
    <div class="my-services" id="active-list">
      <div class="practitioner-service">
        <div class="practitioner-service-info">
          <div class="d-flex justify-content-between">
            <h4><%= Service.first.name %></h4>
            <div>
            </div>
          </div>
          <p>Service Type: <%= Service.first.service_type.capitalize %></p>
          <p>Duration: <%= Service.first.duration %>m</p>
          <div class="practitioner-service-description">
            <p>Take 15 minutes session to find out more about <%= @practitioner.user.first_name %> and <%= @practitioner.user.first_name %>'s services. Only offered once!</p>
          </div>
        </div>
      </div>
      <%= render 'services/active_services_list', active_serivces: @active_serivces %>
    </div>
  </div>
  <div class="lists">
    <div class="my-services" id="deactivated-list">
      <%= render 'services/deactivated_services_list', deactivated_serivces: @deactivated_serivces %>
    </div>
  </div>
</div>
<div class="modal fade" id="newServiceModal" tabindex="-1" role="dialog" aria-labelledby="newServiceModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="newServiceModalLabel">New service</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <%= simple_form_for([@service]) do |f| %>
          <%= f.input :name, label: 'Name of the Service', require: true %>
          <div class="form-group select required service_service_type">
            <label class="select required" for="service_service_type">Service Type<abbr title="required">*</abbr></label>
            <select class="form-control select require" name="service[service_type]" id="service_service_type" required>
              <% if @practitioner.address %>
                <option value="In-person" selected>In-person</option>
                <option value="Virtual">Virtual</option>
              <% else %>
                <option value="Virtual" selected>Virtual</option>
              <% end %>
            </select>
            <% if !@practitioner.address %>
              <p><small><em>Please add physical address where you will be conducting In-person service in <%= link_to 'Profile Page', practitioner_profile_path %> if you want to conduct In-person service.</em></small></p>
            <% end %>
          </div>
          <%= f.input :specialty, as: :select, collection: @practitioner.specialties, include_blank: false, include_hidden: false, require: true %>
          <%= render "service_health_goals/create_form", service: @service %>
          <%= f.input :duration, input_html: { value: 15, min: 15, step: 15 }, require: true %>
          <div class="form-group string required service_price">
            <label class="string required" for="service_price">Price <abbr title="required">*</abbr></label>
            <input class="form-control string required" type="text" name="service[price]" id="service_price" value="10.00">
          </div>
          <%= f.input :description, input_html: { rows: 5, maxlength: 1000 } %>
          <p id="description-counter">0/1000</p>
          <%= f.submit :Create, class: 'btn btn-flat', id: 'create-service' %>
          <%= link_to 'Cancel', '', class: 'btn btn-ghost ml-3' %>
        <% end %>
      </div>
    </div>
  </div>
</div>
<script>
  document.getElementById('create-service').addEventListener('click', (e) => {
    if ((document.getElementById('service_name').value == '') || (document.getElementById('service_description').value == '') || (document.getElementById('service_description').value.length < 6)) {
      e.preventDefault();
    }
  })
  document.getElementById('service_description').addEventListener('keyup', (e) => {
    const description_count = document.getElementById('service_description').value.length;
    const description_max = document.getElementById('service_description').maxLength;
    const description_counter = document.getElementById('description-counter');
    if (description_count == 1000) {
      description_counter.innerText = '1000/1000';
      description_counter.style.color = 'red';
    } else {
      description_counter.innerText = description_count + '/1000';
      description_counter.style.color = 'black';
    }
  })
  var max = 5;
  var checks = document.querySelectorAll(".check");
  for (var i = 0; i < checks.length; i++) {
    checks[i].onclick = selectiveCheck;
  }
  function selectiveCheck (e) {
    var checkedChecks = document.querySelectorAll(".check:checked");
    if (checkedChecks.length >= max + 1) {
      return false;
    } else {
      document.getElementById('create_label_' + e.currentTarget.value).classList.toggle('active');
    }
  }
  <% @practitioner.services.each do |service| %>
    const serviceBtn<%= service.id %> = document.getElementById('service-btn-<%= service.id %>');
    serviceBtn<%= service.id %>.addEventListener('click', (e) => {
      e.preventDefault();
      document.getElementById('service-<%= service.id %>').style.display = 'none';
      document.getElementById('edit_service_<%= service.id %>').style.display = 'block';
    })
    var checks<%= service.id %> = document.querySelectorAll(".check-<%= service.id %>");
    for (var i = 0; i < checks<%= service.id %>.length; i++) {
      checks<%= service.id %>[i].onclick = selectiveCheck<%= service.id %>;
    }
    function selectiveCheck<%= service.id %> (e) {
      var checkedChecks<%= service.id %> = document.querySelectorAll(".check-<%= service.id %>:checked");
      if (checkedChecks<%= service.id %>.length >= max + 1) {
        return false;
      } else {
        document.getElementById('<%= service.id %>_label_' + e.currentTarget.value).classList.toggle('active');
      }
    }
    document.getElementById('service_description_<%= service.id %>').addEventListener('keyup', (e) => {
      const description_count_<%= service.id %> = document.getElementById('service_description_<%= service.id %>').value.length;
      const description_max_<%= service.id %> = document.getElementById('service_description_<%= service.id %>').maxLength;
      const description_counter_<%= service.id %> = document.getElementById('description-counter-<%= service.id %>');
      if (description_count_<%= service.id %> == 1000) {
        description_counter_<%= service.id %>.innerText = '1000/1000';
        description_counter_<%= service.id %>.style.color = 'red';
      } else {
        description_counter_<%= service.id %>.innerText = description_count_<%= service.id %> + '/1000';
        description_counter_<%= service.id %>.style.color = 'black';
      }
    })
  <% end %>
  const tabs = document.querySelectorAll('.tab-underlined');
  const lists = document.querySelectorAll('.lists');
  const entries = function*(iterable) {
    let i = 0;
    for (item of iterable) {
      yield [i++, item]
    }
  }
  const showBlock = index => {
    for (const [blockIndex, block] of entries(lists)) {
      block.style.display = blockIndex === index ? 'block' : 'none'
    }
  }
  showBlock(0)
  for (const [tabIndex, tab] of entries(tabs)) {
    tab.addEventListener('click', e => {
      e.preventDefault();
      showBlock(tabIndex);
      const activeTab = document.querySelector('.active-tab');
      if (!e.currentTarget.classList.contains('active-tab')) {
        if (activeTab !== null) {
          activeTab.classList.remove('active-tab');
        }
        e.currentTarget.classList.toggle('active-tab');
      }
    })
  }
</script>
